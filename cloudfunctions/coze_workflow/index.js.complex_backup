const cloud = require('wx-server-sdk');
const axios = require('axios');

// 初始化云开发
cloud.init({
  env: cloud.DYNAMIC_CURRENT_ENV
});



// 检查是否为无关提问的回答
function isIrrelevantResponse(text) {
  if (!text || typeof text !== 'string') {
    return false;
  }
  
  // 无关提问的关键词和模式
  const irrelevantPatterns = [
    /抱歉.*无法.*提供.*回答/i,
    /我们无法为您提供.*的回答/i,
    /不在.*服务范围/i,
    /专注于.*科研.*合作/i,
    /请问.*科研.*需求/i,
    /我是.*科研.*助手/i,
    /只能.*科研.*相关/i,
    /预约.*进校/i,
    /生活.*服务/i,
    /行政.*事务/i,
    /校园.*导航/i,
    /课程.*安排/i,
    /考试.*成绩/i,
    /宿舍.*食堂/i
  ];
  
  return irrelevantPatterns.some(pattern => pattern.test(text));
}

// 检查是否为详细询问某个特定教授
function isSpecificProfessorInquiry(userInput) {
  if (!userInput || typeof userInput !== 'string') {
    return false;
  }
  
  const specificPatterns = [
    /.*教授.*怎么样/i,
    /.*教授.*详细.*信息/i,
    /.*教授.*研究.*方向/i,
    /.*教授.*联系.*方式/i,
    /.*教授.*发表.*论文/i,
    /.*教授.*具体.*做什么/i,
    /详细.*介绍.*教授/i,
    /能否.*详细.*说明/i,
    /具体.*了解.*教授/i,
    /更多.*关于.*教授/i
  ];
  
  return specificPatterns.some(pattern => pattern.test(userInput));
}

// 从文本中解析教授信息并生成卡片数据
function parseProfesorInfoFromText(text) {
  try {
    if (!text || typeof text !== 'string') {
      return null;
    }

    // 检查是否为无关提问的回答
    if (isIrrelevantResponse(text)) {
      console.log('⚠️ 检测到无关提问回答，跳过教授信息解析');
      return null;
    }

    // 必须包含教授推荐的明确特征才进行解析
    const hasValidProfessorIndicators = [
      /教授.*推荐/i,
      /推荐.*教授/i,
      /以下.*教授/i,
      /为您推荐/i,
      /\d+\.\s*\*\*[^*]+\*\*.*?(学院|研究所|系)/i  // 编号+教授姓名+学院格式
    ].some(pattern => pattern.test(text));

    if (!hasValidProfessorIndicators) {
      console.log('⚠️ 文本中未检测到教授推荐特征，跳过解析');
      return null;
    }

    const professors = [];
    
    // 匹配教授信息：编号+姓名格式
    let professorMatches = text.match(/(\d+\.\s*\*\*([^*]+)\*\*[^]*?)(?=\d+\.\s*\*\*|$)/g);
    
    // 如果没有找到编号格式，尝试匹配单个教授
    if (!professorMatches || professorMatches.length === 0) {
      const singleProfRegex = /\*\*([^*]+)\*\*[^]*?(学院|研究所|系)/i;
      const singleProfMatch = text.match(singleProfRegex);
      if (singleProfMatch) {
        professorMatches = [singleProfMatch[0]];
      }
    }
    
    if (professorMatches && professorMatches.length > 0) {
      professorMatches.forEach((match, index) => {
        try {
          // 提取教授姓名
          const nameMatch = match.match(/\*\*([^*]+)\*\*/);
          const name = nameMatch ? nameMatch[1].trim() : `教授${index + 1}`;
          
          // 提取学院信息
          let school = '';
          const schoolPatterns = [
            /浙江大学([^，。：:]*?)(学院|研究所|系)/i,
            /([^，。：:*]*?)(学院|研究所|系)/i
          ];
          
          for (const pattern of schoolPatterns) {
            const schoolMatch = match.match(pattern);
            if (schoolMatch) {
              school = (schoolMatch[1] + schoolMatch[2]).trim();
              // 清理学院名称
              school = school.replace(/^(浙江大学|浙大)/, '').trim();
              school = school.replace(/\*\*[^*]*\*\*[：:]*/, '').trim();
              if (school && school.length > 2 && !school.includes('*')) {
                break;
              }
            }
          }
          if (!school) school = '未知学院';
          
          // 提取邮箱
          let email = '';
          const emailMatch = match.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/);
          if (emailMatch) {
            email = emailMatch[1].trim();
          }

          // 提取办公地点
          let office = '';
          const officeMatch = match.match(/(?:办公地点|办公室|地址)[：:\s]*([^\n。；,，]+)/i);
          if (officeMatch && officeMatch[1]) {
            office = officeMatch[1].trim().replace(/[。；,，].*$/, '');
          }

          // 提取联系电话
          let phone = '';
          const phoneMatch = match.match(/(?:电话|手机|tel)[：:\s]*([\d\s\-\+\(\)]{8,20})/i);
          if (phoneMatch && phoneMatch[1]) {
            phone = phoneMatch[1].trim().replace(/[^\d\-\+\(\)\s]/g, '');
          }
          
          // 提取主页链接
          const homepages = [];
          const urlMatches = match.match(/(https?:\/\/[^\s，。）\n,]+)/g);
          if (urlMatches) {
            urlMatches.forEach(url => {
              if (!homepages.includes(url)) {
                homepages.push(url);
              }
            });
          }
          
          // 提取标签/研究方向 - 只保留核心关键词
          const tags = [];
          const coreKeywords = [
            '计算机视觉', '人工智能', '机器学习', '深度学习', 
            '自然语言处理', '大模型', '多模态', '数据挖掘',
            '智能控制', '软件工程', '网络安全', '数据库', '云计算',
            '物联网', '区块链', '医学人工智能', '生物医学工程',
            '材料科学', '化学工程', '机械工程', '电气工程',
            '新能源', '光电技术', '生物技术'
          ];
          
          coreKeywords.forEach(keyword => {
            if (match.toLowerCase().includes(keyword.toLowerCase())) {
              if (!tags.includes(keyword)) {
                tags.push(keyword);
              }
            }
          });
          
          // 提取研究成果/亮点
          let researchContent = match;
          // 清理联系信息
          researchContent = researchContent.replace(/\*\*[^*]+\*\*/g, '');
          researchContent = researchContent.replace(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g, '');
          researchContent = researchContent.replace(/https?:\/\/[^\s，。）\n,]+/g, '');
          researchContent = researchContent.replace(/(邮箱|电话|主页|网站|办公地点|地址|联系方式)[：:]?[^。\n]*[。\n]?/g, '');
          
          const achievements = researchContent
            .split(/[。；;\n]/)
            .map(s => s.replace(/^\d+\.\s*/, '').replace(/^[-•]\s*/, '').trim())
            .filter(s => s.length > 15 && !/(邮箱|电话|主页|网站|办公地点|地址|联系方式|http|@)/.test(s))
            .slice(0, 3);
          
          const finalHighlights = achievements.length > 0 ? achievements : [
            '在相关研究领域具有丰富经验'
          ];
          
          // 计算匹配度
          let score = 60; // 基础分
          if (email) score += 10;
          if (homepages.length > 0) score += 10;
          if (finalTags.length > 0) score += 10;
          if (achievements.length > 2) score += 5;
          if (office) score += 2;
          if (phone) score += 3;
          
          const professorData = {
            name: name,
            school: school,
            areas: tags.slice(0, 3), // 最多3个研究方向标签
            highlights: finalHighlights,
            score: Math.min(score, 100),
            displayScore: Math.min(score, 100),
            profId: `prof_${Date.now()}_${index}`,
            documentId: `doc_${Date.now()}_${index}`
          };
          
          // 只有在有值的情况下才添加
          if (email) {
            professorData.email = email;
          }
          if (office) {
            professorData.office = office;
          }
          if (phone) {
            professorData.phone = phone;
          }
          if (homepages.length > 0) {
            professorData.homepages = homepages;
          }
          
          professors.push(professorData);
          
        } catch (e) {
          console.log(`解析第${index + 1}位教授信息失败:`, e);
        }
      });
    }
    
    if (professors.length > 0) {
      console.log(`成功解析 ${professors.length} 位教授信息`);
      return {
        type: "professor_list",
        professors: professors
      };
    }
    
  } catch (e) {
    console.log('解析教授信息失败:', e);
  }
  
  return null;
}

// 从数据库直接查询教授信息


// 备用的通用查询（保留原功能）
async function queryProfessorsFromDatabase(userInput, responseText) {
  try {
    console.log('🔍 从数据库查询教授信息...');
    
    // 简化关键词提取
    const combinedText = (userInput || '') + ' ' + (responseText || '');
    let queryKeyword = '';
    
    // 匹配核心关键词
    const coreKeywords = ['计算机视觉', '人工智能', '机器学习', '深度学习', '大数据', '网络安全', '生物医学'];
    for (const keyword of coreKeywords) {
      if (combinedText.includes(keyword)) {
        queryKeyword = keyword;
        break;
      }
    }
    
    // 如果没有匹配到关键词，使用用户输入的第一个有意义的词
    if (!queryKeyword) {
      const cleanInput = userInput.replace(/[我想找合作教授的方向推荐一些给]/g, '').trim();
      queryKeyword = cleanInput || '教授';
    }
    
    // 调用search_professors云函数
    const result = await cloud.callFunction({
      name: 'search_professors',
      data: {
        q: queryKeyword,
        page: 1,
        pageSize: 5,
        sortBy: 'time'
      }
    });
    
    if (result && result.result && result.result.code === 0 && 
        result.result.data && result.result.data.list && result.result.data.list.length > 0) {
      
      const professors = result.result.data.list.map((doc, index) => ({
        name: doc.name || '未知',
        school: doc.school || '未知学院',
        // 联系信息（数据库的核心价值）
        email: doc.email || '',
        homepages: doc.homepage ? [doc.homepage.trim()] : [],
        office: doc.office || '',
        phone: doc.phone || '',
        // 基础信息（作为备用）
        areas: Array.isArray(doc.areas) ? doc.areas.slice(0, 3) : [],
        highlights: Array.isArray(doc.highlights) ? doc.highlights.slice(0, 3) : [],
        score: 85 + Math.random() * 10,
        displayScore: 85 + Math.random() * 10,
        profId: doc.profId || `prof_db_${Date.now()}_${index}`,
        documentId: `doc_db_${Date.now()}_${index}`
      }));
      
      return {
        type: "professor_list",
        professors: professors
      };
    }
    
    return null;
    
  } catch (error) {
    console.error('❌ 数据库查询教授信息失败:', error);
    return null;
  }
}


    
    // 第一步：从AI回复中提取教授学术信息
    const aiProfessors = parseAcademicInfoFromText(responseText);
    if (!aiProfessors || aiProfessors.length === 0) {
      console.log('⚠️ AI回复中未找到教授学术信息');
      return null;
    }
    
    console.log(`✅ 从AI回复提取到 ${aiProfessors.length} 位教授的学术信息`);
    
    // 第二步：根据AI解析的教授姓名精确查询数据库
    const professorNames = aiProfessors.map(prof => prof.name);
    const dbProfessors = await queryProfessorsByNames(professorNames);
    
    console.log(`📊 从数据库精确查询到 ${dbProfessors.length} 位教授的联系信息`);
    
    // 第三步：合并学术信息和联系信息（精确匹配）
    const hybridProfessors = aiProfessors.map((aiProf, index) => {
      // 寻找最匹配的数据库记录
      let bestDbMatch = null;
      let bestMatchScore = 0;
      
      // 方法1：优先根据原始名称精确匹配
      for (const dbProf of dbProfessors) {
        if (dbProf.originalName === aiProf.name) {
          bestDbMatch = dbProf;
          bestMatchScore = 1.0;
          console.log(`🎯 完全匹配: ${aiProf.name} = ${dbProf.originalName} -> ${dbProf.name}`);
          break;
        }
      }
      
      // 方法2：如果没有找到完全匹配，使用相似度最高的
      if (!bestDbMatch) {
        for (const dbProf of dbProfessors) {
          const similarity = calculateNameSimilarity(aiProf.name, dbProf.name);
          if (similarity > bestMatchScore && similarity > 0.7) {
            bestDbMatch = dbProf;
            bestMatchScore = similarity;
          }
        }
        
        if (bestDbMatch) {
          console.log(`� 相似度匹配: ${aiProf.name} -> ${bestDbMatch.name} (${bestMatchScore.toFixed(2)})`);
        }
      }
      
      // 合并数据：AI的学术信息 + 数据库的联系信息
      const hybridProf = {
        name: aiProf.name,
        school: aiProf.school || (bestDbMatch ? bestDbMatch.school : '未知学院'),
        areas: aiProf.areas || [], // 来自AI解析
        highlights: aiProf.highlights || [], // 来自AI解析
        score: aiProf.score || 85,
        displayScore: aiProf.displayScore || 85,
        profId: aiProf.profId || `prof_hybrid_${Date.now()}_${index}`,
        documentId: aiProf.documentId || `doc_hybrid_${Date.now()}_${index}`
      };
      
      // 添加数据库联系信息（如果找到匹配）
      if (bestDbMatch) {
        if (bestDbMatch.email && bestDbMatch.email.trim() && bestDbMatch.email.includes('@')) {
          hybridProf.email = bestDbMatch.email.trim();
        }
        
        // 优先使用数据库中的个人主页（严格验证）
        if (bestDbMatch.homepages && Array.isArray(bestDbMatch.homepages) && bestDbMatch.homepages.length > 0) {
          const validHomepages = bestDbMatch.homepages
            .filter(h => h && h.trim()) // 过滤空值
            .map(h => h.trim()) // 清理空格
            .filter(h => isValidHomepageUrl(h)); // 严格验证URL
          
          if (validHomepages.length > 0) {
            hybridProf.homepages = validHomepages.slice(0, 2); // 最多2个主页
            console.log(`📚 使用验证过的数据库主页: ${hybridProf.homepages.join(', ')}`);
          } else {
            console.log(`⚠️ 数据库主页验证失败，将使用备用方案`);
          }
        }
        
        if (bestDbMatch.office && bestDbMatch.office.trim()) {
          hybridProf.office = bestDbMatch.office.trim();
        }
        if (bestDbMatch.phone && bestDbMatch.phone.trim()) {
          hybridProf.phone = bestDbMatch.phone.trim();
        }
        
        // 使用数据库的学院信息（更准确）
        if (bestDbMatch.school && bestDbMatch.school.trim()) {
          hybridProf.school = bestDbMatch.school.trim();
        }
        
        console.log(`📞 ${hybridProf.name} 数据库联系信息:`, {
          dbName: bestDbMatch.name,
          matchScore: bestMatchScore.toFixed(2),
          email: hybridProf.email || '无',
          homepage: hybridProf.homepages ? hybridProf.homepages.join(', ') : '无',
          office: hybridProf.office || '无',
          phone: hybridProf.phone || '无'
        });
        
        // 标记已使用的数据库记录（避免重复使用）
        const usedIndex = dbProfessors.indexOf(bestDbMatch);
        if (usedIndex > -1) {
          dbProfessors.splice(usedIndex, 1);
        }
        
      } else {
        console.log(`❌ ${hybridProf.name} 未找到数据库匹配，启动备用方案`);
        
        // 备用方案：尝试从AI回复文本中提取特定教授的联系信息
        const extractedContact = extractSpecificProfessorContact(responseText, hybridProf.name, index);
        
        if (extractedContact.email) {
          hybridProf.email = extractedContact.email;
          console.log(`   � 从AI回复提取邮箱: ${extractedContact.email}`);
        }
        
        if (extractedContact.homepages && extractedContact.homepages.length > 0) {
          hybridProf.homepages = extractedContact.homepages;
          console.log(`   🏠 从AI回复提取主页: ${extractedContact.homepages.join(', ')}`);
        }
        
        if (extractedContact.office) {
          hybridProf.office = extractedContact.office;
          console.log(`   � 从AI回复提取办公室: ${extractedContact.office}`);
        }
        
        if (extractedContact.phone) {
          hybridProf.phone = extractedContact.phone;
          console.log(`   📞 从AI回复提取电话: ${extractedContact.phone}`);
        }
      }
      
      // 主页的最后备用机制（只在完全没有主页时使用）
      if (!hybridProf.homepages || hybridProf.homepages.length === 0) {
        console.log(`🔍 ${hybridProf.name} 仍然缺少主页，使用标准格式生成...`);
        
        const standardHomepage = generateZjuHomepage(hybridProf.name);
        if (standardHomepage) {
          hybridProf.homepages = [standardHomepage];
          console.log(`   🏫 生成标准主页: ${standardHomepage}`);
        }
      }
      
      // 简化日志
      console.log(`✓ ${hybridProf.name}: ${bestDbMatch ? '已匹配数据库' : '使用AI解析'}`);
      
      return hybridProf;
    });
    
    // 最终验证和去重：确保没有重复的主页分配
    console.log('\n� 最终教授卡片验证与去重:');
    const usedHomepages = new Set();
    const usedEmails = new Set();
    
    // 检查并修复重复的联系信息
    hybridProfessors.forEach((prof, index) => {
      // 检查主页重复
      if (prof.homepages && prof.homepages.length > 0) {
        const uniqueHomepages = prof.homepages.filter(homepage => {
          if (usedHomepages.has(homepage)) {
            console.log(`⚠️ 检测到重复主页 ${homepage}，从 ${prof.name} 中移除`);
            return false;
          }
          usedHomepages.add(homepage);
          return true;
        });
        prof.homepages = uniqueHomepages;
      }
      
      // 检查邮箱重复
      if (prof.email && usedEmails.has(prof.email)) {
        console.log(`⚠️ 检测到重复邮箱 ${prof.email}，从 ${prof.name} 中移除`);
        prof.email = '';
      } else if (prof.email) {
        usedEmails.add(prof.email);
      }
      
    });
    
    console.log(`✅ 处理完成，生成了 ${hybridProfessors.length} 位教授的信息卡片`);
    
    return {
      type: "professor_list",
      professors: hybridProfessors
    };


// 从AI回复文本中专门提取学术信息（研究方向、内容、成果）
function parseAcademicInfoFromText(text) {
  try {
    if (!text || typeof text !== 'string') {
      return null;
    }

    // 检查是否为无关提问的回答
    if (isIrrelevantResponse(text)) {
      console.log('⚠️ 检测到无关提问回答，跳过学术信息解析');
      return null;
    }

    // 必须包含教授推荐的明确特征
    const hasValidProfessorIndicators = [
      /教授.*推荐/i,
      /推荐.*教授/i,
      /以下.*教授/i,
      /为您推荐/i,
      /\d+\.\s*\*\*[^*]+\*\*.*?(学院|研究所|系)/i
    ].some(pattern => pattern.test(text));

    if (!hasValidProfessorIndicators) {
      console.log('⚠️ 文本中未检测到教授推荐特征，跳过解析');
      return null;
    }

    const professors = [];
    
    // 匹配教授信息：编号+姓名格式
    let professorMatches = text.match(/(\d+\.\s*\*\*([^*]+)\*\*[^]*?)(?=\d+\.\s*\*\*|$)/g);
    
    if (!professorMatches || professorMatches.length === 0) {
      const singleProfRegex = /\*\*([^*]+)\*\*[^]*?(学院|研究所|系)/i;
      const singleProfMatch = text.match(singleProfRegex);
      if (singleProfMatch) {
        professorMatches = [singleProfMatch[0]];
      }
    }
    
    if (professorMatches && professorMatches.length > 0) {
      professorMatches.forEach((match, index) => {
        try {
          // 提取教授姓名
          const nameMatch = match.match(/\*\*([^*]+)\*\*/);
          const name = nameMatch ? nameMatch[1].trim() : `教授${index + 1}`;
          
          // 提取学院信息
          let school = '';
          const schoolPatterns = [
            /浙江大学([^，。：:]*?)(学院|研究所|系)/i,
            /([^，。：:*]*?)(学院|研究所|系)/i
          ];
          
          for (const pattern of schoolPatterns) {
            const schoolMatch = match.match(pattern);
            if (schoolMatch) {
              school = (schoolMatch[1] + schoolMatch[2]).trim();
              school = school.replace(/^(浙江大学|浙大)/, '').trim();
              school = school.replace(/\*\*[^*]*\*\*[：:]*/, '').trim();
              if (school && school.length > 2 && !school.includes('*')) {
                break;
              }
            }
          }
          if (!school) school = '未知学院';
          
          // 提取研究方向标签（专注学术关键词）
          const tags = [];
          const academicKeywords = [
            '计算机视觉', '人工智能', '机器学习', '深度学习', 
            '自然语言处理', '大模型', '多模态', '数据挖掘',
            '智能控制', '软件工程', '网络安全', '数据库', '云计算',
            '物联网', '区块链', '医学人工智能', '生物医学工程',
            '材料科学', '化学工程', '机械工程', '电气工程',
            '新能源', '光电技术', '生物技术', '纳米材料',
            '量子计算', '机器人技术', '自动化控制'
          ];
          
          academicKeywords.forEach(keyword => {
            if (match.toLowerCase().includes(keyword.toLowerCase())) {
              if (!tags.includes(keyword)) {
                tags.push(keyword);
              }
            }
          });
          
          // 提取研究成果/学术亮点（重点清理联系信息）
          let academicContent = match;
          
          // 移除所有联系信息和非学术内容
          academicContent = academicContent.replace(/\*\*[^*]+\*\*/g, ''); // 移除姓名标记
          academicContent = academicContent.replace(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g, ''); // 移除邮箱
          academicContent = academicContent.replace(/https?:\/\/[^\s，。）\n,]+/g, ''); // 移除URL
          academicContent = academicContent.replace(/(?:联系电话|电话|手机|tel)[：:\s]*[\d\s\-\+\(\)]{8,20}/gi, ''); // 移除电话
          academicContent = academicContent.replace(/(?:办公地点|办公室|地址)[：:\s]*[^\n。；,，]+/gi, ''); // 移除地址
          academicContent = academicContent.replace(/(邮箱|电话|主页|网站|办公地点|地址|联系方式|联系电话)[：:]?[^。\n]*[。\n]?/gi, ''); // 移除联系信息句子
          
          // 提取有意义的学术句子
          const academicHighlights = academicContent
            .split(/[。；;\n]/)
            .map(s => s.replace(/^\d+\.\s*/, '').replace(/^[-•]\s*/, '').trim())
            .filter(s => {
              // 过滤条件：足够长，不包含联系信息关键词，包含学术关键词
              if (s.length < 20) return false;
              if (/(邮箱|电话|主页|网站|办公地点|地址|联系方式|联系电话|http|@|\.com|\.edu|\.cn)/.test(s)) return false;
              
              // 必须包含学术相关词汇
              const academicIndicators = ['研究', '开发', '设计', '分析', '算法', '系统', '技术', '方法', '理论', '应用', '创新', '发表', '论文', '项目', '专利', '成果'];
              return academicIndicators.some(indicator => s.includes(indicator));
            })
            .slice(0, 3); // 最多3条学术亮点
          
          const finalHighlights = academicHighlights.length > 0 ? academicHighlights : [
            '在相关研究领域具有丰富经验'
          ];
          
          // 计算匹配度（基于学术信息丰富程度）
          let score = 60;
          if (tags.length > 0) score += 15;
          if (academicHighlights.length > 1) score += 15;
          if (school !== '未知学院') score += 10;
          
          const professorData = {
            name: name,
            school: school,
            areas: tags.slice(0, 3), // 最多3个研究方向标签
            highlights: finalHighlights, // 纯学术亮点，不含联系信息
            score: Math.min(score, 100),
            displayScore: Math.min(score, 100),
            profId: `prof_academic_${Date.now()}_${index}`,
            documentId: `doc_academic_${Date.now()}_${index}`
          };
          
          professors.push(professorData);
          
        } catch (e) {
          console.log(`解析第${index + 1}位教授学术信息失败:`, e);
        }
      });
    }
    
    if (professors.length > 0) {
      console.log(`✅ 成功解析 ${professors.length} 位教授的学术信息`);
      return professors;
    }
    
  } catch (e) {
    console.log('解析教授学术信息失败:', e);
  }
  
  return null;
}

// 判断用户是否在询问联系信息
function isAskingForContactInfo(userInput) {
  if (!userInput || typeof userInput !== 'string') {
    return false;
  }
  
  const contactQuestionPatterns = [
    /.*邮箱.*(是什么|多少|怎么联系)/i,
    /.*主页.*(是什么|在哪|链接)/i,
    /.*电话.*(是什么|多少|怎么联系)/i,
    /.*办公地点.*(在哪|地址)/i,
    /.*联系方式.*(是什么|怎么联系)/i,
    /.*怎么联系.*教授/i,
    /.*教授.*联系方式/i,
    /.*教授.*邮箱/i,
    /.*教授.*主页/i,
    /.*教授.*电话/i,
    /邮箱/i,
    /主页/i,
    /网址/i,
    /联系电话/i,
    /办公地点/i,
    /办公室/i
  ];
  
  return contactQuestionPatterns.some(pattern => pattern.test(userInput));
}

// 从AI回复中提取联系信息（用于用户询问联系方式时）
function extractContactInfoFromText(text) {
  if (!text || typeof text !== 'string') {
    return {};
  }
  
  const contactInfo = {
    emails: [],
    homepages: [],
    phones: [],
    offices: []
  };
  
  try {
    // 提取邮箱
    const emailPattern = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g;
    const emails = text.match(emailPattern);
    if (emails) {
      contactInfo.emails = [...new Set(emails)]; // 去重
    }
    
    // 强化URL（主页）提取 - 支持多种格式
    const urlPatterns = [
      // 标准HTTP/HTTPS链接
      /https?:\/\/[^\s，。）\n,\]]+/g,
      // 个人主页关键词后的链接
      /(?:个人主页|主页|网站|homepage|website)[：:\s]*([^\s，。）\n,\]]+)/gi,
      // 浙大个人主页格式
      /person\.zju\.edu\.cn\/[^\s，。）\n,\]]+/g,
      // 其他常见学术主页格式
      /[a-zA-Z0-9.-]+\.edu(?:\.cn)?\/[~\/\w.-]+/g
    ];
    
    const allUrls = new Set();
    
    for (const pattern of urlPatterns) {
      const matches = text.matchAll(pattern);
      for (const match of matches) {
        let url = match[1] || match[0]; // 使用捕获组或整个匹配
        
        // 清理URL
        url = url.trim().replace(/[，。）\]]+$/, ''); // 移除末尾的中文标点
        
        // 验证URL格式
        if (url && (url.startsWith('http') || url.includes('.edu') || url.includes('person.zju'))) {
          // 确保以http开头
          if (!url.startsWith('http')) {
            if (url.startsWith('//')) {
              url = 'https:' + url;
            } else {
              url = 'https://' + url;
            }
          }
          
          allUrls.add(url);
        }
      }
    }
    
    contactInfo.homepages = [...allUrls];
    
    // 提取电话
    const phonePattern = /(?:联系电话|电话|手机|tel)[：:\s]*([\d\s\-\+\(\)]{8,20})/gi;
    const phoneMatches = text.matchAll(phonePattern);
    for (const match of phoneMatches) {
      if (match[1]) {
        contactInfo.phones.push(match[1].trim());
      }
    }
    
    // 提取办公地点
    const officePattern = /(?:办公地点|办公室|地址)[：:\s]*([^\n。；,，]+)/gi;
    const officeMatches = text.matchAll(officePattern);
    for (const match of officeMatches) {
      if (match[1]) {
        contactInfo.offices.push(match[1].trim());
      }
    }
    
    console.log('🔍 从AI回复提取的联系信息:', contactInfo);
    
  } catch (error) {
    console.error('❌ 提取联系信息失败:', error);
  }
  
  return contactInfo;
}

// 专门提取教授个人主页的增强函数（优化版）
function extractProfessorHomepages(text, professorName) {
  const homepages = [];
  
  if (!text || typeof text !== 'string' || text.length < 50) {
    return homepages;
  }
  
  try {
    console.log(`🔍 为教授 ${professorName} 提取个人主页...`);
    
    // 快速检查是否包含URL关键字
    if (!text.includes('http') && !text.includes('person.zju') && !text.includes('.edu')) {
      console.log('⚠️ 文本中未发现URL相关内容，跳过提取');
      return homepages;
    }
    
    // 提取该教授相关段落（限制长度避免过度处理）
    const professorSection = extractProfessorSection(text, professorName);
    const searchText = (professorSection || text).substring(0, 2000); // 限制搜索文本长度
    
    // 简化的主页提取模式（只保留最有效的模式）
    const homepagePatterns = [
      // 1. 标准HTTP/HTTPS链接
      /https?:\/\/[^\s，。）\n,\]【】]+/g,
      // 2. 浙大特定格式
      /person\.zju\.edu\.cn\/[^\s，。）\n,\]【】]+/g,
      // 3. 教育域名格式
      /[a-zA-Z0-9.-]+\.edu(?:\.cn)?\/[~\/\w.-]+/g
    ];
    
    for (const pattern of homepagePatterns) {
      const matches = searchText.match(pattern) || [];
      for (const match of matches) {
        let url = match.trim().replace(/[，。）\]【】]+$/, '');
        
        // 快速验证URL
        if (url && url.length > 10 && url.length < 150 && isValidHomepageUrl(url)) {
          // 确保以http开头
          if (!url.startsWith('http')) {
            url = url.startsWith('//') ? 'https:' + url : 'https://' + url;
          }
          
          if (!homepages.includes(url)) {
            homepages.push(url);
            console.log(`✅ 找到主页: ${url}`);
          }
        }
        
        // 限制最多提取3个主页
        if (homepages.length >= 3) break;
      }
      
      if (homepages.length >= 3) break;
    }
    
    console.log(`📝 为 ${professorName} 提取到 ${homepages.length} 个主页链接`);
    
  } catch (error) {
    console.error(`❌ 提取 ${professorName} 主页失败:`, error);
  }
  
  return homepages;
}

// 提取特定教授的相关段落
function extractProfessorSection(text, professorName) {
  try {
    // 寻找教授姓名周围的内容
    const nameIndex = text.indexOf(professorName);
    if (nameIndex === -1) return null;
    
    // 提取前后各500字符的内容
    const start = Math.max(0, nameIndex - 200);
    const end = Math.min(text.length, nameIndex + 800);
    
    return text.substring(start, end);
  } catch (error) {
    console.error('提取教授段落失败:', error);
    return null;
  }
}

// 验证URL是否为有效的主页链接（增强版）
function isValidHomepageUrl(url) {
  if (!url || typeof url !== 'string') return false;
  
  // 清理URL
  url = url.trim();
  
  // 基本长度检查
  if (url.length < 10 || url.length > 300) return false;
  
  // 必须是HTTP/HTTPS链接
  if (!/^https?:\/\//i.test(url)) return false;
  
  // 有效域名列表（按优先级排序）
  const validDomains = [
    'zju.edu.cn',           // 浙大官方域名（最高优先级）
    'person.zju.edu.cn',    // 浙大个人主页
    '.edu.cn',              // 中国教育域名
    '.edu',                 // 国外教育域名
    '.ac.cn',               // 中科院等科研机构
    'scholar.google',       // Google学术
    'researchgate.net',     // ResearchGate
    'orcid.org',            // ORCID
    'ieee.org',             // IEEE
    'acm.org',              // ACM
    'dblp.org',             // DBLP
    'semanticscholar.org'   // Semantic Scholar
  ];
  
  const hasValidDomain = validDomains.some(domain => url.toLowerCase().includes(domain));
  
  // 排除明显的非主页链接
  const invalidPatterns = [
    /\.(jpg|jpeg|png|gif|pdf|doc|docx|ppt|pptx|xls|xlsx)$/i,
    /\.(zip|rar|tar|gz|7z)$/i,
    /^\d+$/,
    /^[,，。；;]+/,
    /\s/  // 包含空格的链接通常是错误的
  ];
  
  const isInvalid = invalidPatterns.some(pattern => pattern.test(url));
  
  return hasValidDomain && !isInvalid;
}

// 从AI回复中为特定教授提取联系信息
function extractSpecificProfessorContact(responseText, professorName, professorIndex) {
  const result = {
    email: '',
    homepages: [],
    office: '',
    phone: ''
  };
  
  if (!responseText || !professorName) return result;
  
  try {
    // 尝试定位该教授的信息段落
    const professorPattern = new RegExp(`\\*\\*${professorName.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\*\\*[\\s\\S]*?(?=\\d+\\.\\s*\\*\\*|$)`, 'i');
    const match = responseText.match(professorPattern);
    
    if (match) {
      const professorSection = match[0];
      
      // 提取邮箱
      const emailMatch = professorSection.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/);
      if (emailMatch) {
        result.email = emailMatch[1];
      }
      
      // 提取主页链接
      const urlMatches = professorSection.match(/(https?:\/\/[^\s，。）\n,]+)/g);
      if (urlMatches) {
        result.homepages = urlMatches.filter(url => isValidHomepageUrl(url)).slice(0, 2);
      }
      
      // 提取办公地点
      const officeMatch = professorSection.match(/(?:办公地点|办公室|地址)[：:\s]*([^\n。；,，]+)/i);
      if (officeMatch) {
        result.office = officeMatch[1].trim();
      }
      
      // 提取电话
      const phoneMatch = professorSection.match(/(?:电话|手机|tel)[：:\s]*([\d\s\-\+\(\)]{8,20})/i);
      if (phoneMatch) {
        result.phone = phoneMatch[1].trim();
      }
    }
  } catch (e) {
    console.error(`提取 ${professorName} 联系信息失败:`, e);
  }
  
  return result;
}

// 生成浙大标准主页格式（保守版本，仅作为最后备用）
function generateZjuHomepage(professorName) {
  if (!professorName || professorName.length < 2) {
    return null;
  }
  
  try {
    console.log(`⚠️ 警告：为 ${professorName} 生成推测主页（可能不准确）`);
    
    // 浙大个人主页的常见格式：https://person.zju.edu.cn/[姓名拼音]
    const pinyinName = convertToPinyin(professorName);
    if (pinyinName) {
      const generatedHomepage = `https://person.zju.edu.cn/${pinyinName.toLowerCase()}`;
      console.log(`🎯 生成推测主页: ${generatedHomepage}`);
      console.log(`⚠️ 注意：此主页为推测生成，可能不存在或不准确`);
      return generatedHomepage;
    } else {
      console.log(`❌ 无法为 ${professorName} 生成拼音，跳过主页生成`);
    }
    
  } catch (error) {
    console.error(`❌ 生成 ${professorName} 标准主页失败:`, error);
  }
  
  return null; // 如果无法生成，返回null，不提供错误的主页
}

// 简单的中文转拼音函数 (基本版本)
function convertToPinyin(chineseName) {
  // 常见中文姓名拼音映射表 (简化版)
  const pinyinMap = {
    '王': 'wang', '李': 'li', '张': 'zhang', '刘': 'liu', '陈': 'chen',
    '杨': 'yang', '赵': 'zhao', '黄': 'huang', '周': 'zhou', '吴': 'wu',
    '徐': 'xu', '孙': 'sun', '胡': 'hu', '朱': 'zhu', '高': 'gao',
    '林': 'lin', '何': 'he', '郭': 'guo', '马': 'ma', '罗': 'luo',
    '梁': 'liang', '宋': 'song', '郑': 'zheng', '谢': 'xie', '韩': 'han',
    '唐': 'tang', '冯': 'feng', '于': 'yu', '董': 'dong', '萧': 'xiao',
    '程': 'cheng', '曹': 'cao', '袁': 'yuan', '邓': 'deng', '许': 'xu',
    '傅': 'fu', '沈': 'shen', '曾': 'zeng', '彭': 'peng', '吕': 'lv',
    '苏': 'su', '卢': 'lu', '蒋': 'jiang', '蔡': 'cai', '贾': 'jia',
    '丁': 'ding', '魏': 'wei', '薛': 'xue', '叶': 'ye', '阎': 'yan',
    '余': 'yu', '潘': 'pan', '杜': 'du', '戴': 'dai', '夏': 'xia',
    '钟': 'zhong', '汪': 'wang', '田': 'tian', '任': 'ren', '姜': 'jiang',
    '范': 'fan', '方': 'fang', '石': 'shi', '姚': 'yao', '谭': 'tan',
    '盛': 'sheng', '邹': 'zou', '熊': 'xiong', '金': 'jin', '陆': 'lu',
    '郝': 'hao', '孔': 'kong', '白': 'bai', '崔': 'cui', '康': 'kang',
    '毛': 'mao', '邱': 'qiu', '秦': 'qin', '江': 'jiang', '史': 'shi',
    '顾': 'gu', '侯': 'hou', '邵': 'shao', '孟': 'meng', '龙': 'long',
    '万': 'wan', '段': 'duan', '漕': 'cao', '钱': 'qian', '汤': 'tang',
    '尹': 'yin', '黎': 'li', '易': 'yi', '常': 'chang', '武': 'wu',
    '乔': 'qiao', '贺': 'he', '赖': 'lai', '龚': 'gong', '文': 'wen',
    
    // 常见名字字符
    '伟': 'wei', '芳': 'fang', '娜': 'na', '敏': 'min', '静': 'jing',
    '丽': 'li', '强': 'qiang', '磊': 'lei', '军': 'jun', '洋': 'yang',
    '勇': 'yong', '艳': 'yan', '杰': 'jie', '娟': 'juan', '涛': 'tao',
    '明': 'ming', '超': 'chao', '秀': 'xiu', '霞': 'xia', '平': 'ping',
    '刚': 'gang', '桂': 'gui', '英': 'ying', '华': 'hua', '玉': 'yu',
    '萍': 'ping', '红': 'hong', '燕': 'yan', '丹': 'dan', '阳': 'yang',
    '帆': 'fan', '雪': 'xue', '梅': 'mei', '辉': 'hui', '浩': 'hao',
    '凯': 'kai', '欣': 'xin', '晨': 'chen', '宇': 'yu', '航': 'hang',
    '鹏': 'peng', '琳': 'lin', '婷': 'ting', '峰': 'feng', '斌': 'bin',
    '晶': 'jing', '兰': 'lan', '雨': 'yu', '鑫': 'xin', '莉': 'li',
    '博': 'bo', '远': 'yuan', '翔': 'xiang', '龙': 'long', '瑞': 'rui',
    '志': 'zhi', '东': 'dong', '南': 'nan', '西': 'xi', '北': 'bei',
    '雷': 'lei', '蕾': 'lei', '思': 'si', '慧': 'hui', '新': 'xin'
  };
  
  if (!chineseName || typeof chineseName !== 'string') {
    return null;
  }
  
  let pinyin = '';
  for (let i = 0; i < chineseName.length; i++) {
    const char = chineseName[i];
    if (pinyinMap[char]) {
      pinyin += pinyinMap[char];
    } else {
      // 如果找不到映射，使用字符的Unicode编码作为备用
      return null; // 无法转换则返回null
    }
  }
  
  return pinyin || null;
}

// 清理回答文本，智能处理联系信息
function cleanResponseText(text, cardData, userInput = '') {
  // 如果有教授卡片数据但用户询问联系信息，提供联系信息总结
  if (cardData && cardData.type === 'professor_list' && cardData.professors && cardData.professors.length > 0) {
    if (isAskingForContactInfo(userInput)) {
      console.log('🔍 用户询问联系信息，生成联系方式总结');
      
      let contactSummary = '以下是教授的联系方式：\n\n';
      cardData.professors.forEach((prof, index) => {
        contactSummary += `**${prof.name}**\n`;
        if (prof.email) contactSummary += `邮箱：${prof.email}\n`;
        if (prof.homepages && prof.homepages.length > 0) {
          contactSummary += `个人主页：${prof.homepages.join(', ')}\n`;
        }
        if (prof.office) contactSummary += `办公地点：${prof.office}\n`;
        if (prof.phone) contactSummary += `联系电话：${prof.phone}\n`;
        
        // 如果没有任何联系信息，从原文提取
        if (!prof.email && !prof.homepages && !prof.office && !prof.phone) {
          const extractedContact = extractContactInfoFromText(text);
          if (extractedContact.emails.length > 0) {
            contactSummary += `邮箱：${extractedContact.emails[index] || extractedContact.emails[0]}\n`;
          }
          if (extractedContact.homepages.length > 0) {
            contactSummary += `个人主页：${extractedContact.homepages[index] || extractedContact.homepages[0]}\n`;
          }
          if (extractedContact.offices.length > 0) {
            contactSummary += `办公地点：${extractedContact.offices[index] || extractedContact.offices[0]}\n`;
          }
          if (extractedContact.phones.length > 0) {
            contactSummary += `联系电话：${extractedContact.phones[index] || extractedContact.phones[0]}\n`;
          }
        }
        
        if (index < cardData.professors.length - 1) {
          contactSummary += '\n';
        }
      });
      
      return contactSummary;
    }
    
    // 常规情况：隐藏文字回复
    return '';
  }

  if (!text || typeof text !== 'string') {
    return '';
  }
  
  let cleanedText = text;
  
  // 清理引用标记
  cleanedText = cleanedText.replace(/\[\d+\]\s*prof_info/gi, '');
  cleanedText = cleanedText.replace(/\[\d+\]/g, '');
  cleanedText = cleanedText.replace(/【\d+】/g, '');
  
  // 如果用户明确询问联系信息，则保留相关内容
  if (isAskingForContactInfo(userInput)) {
    console.log('🔍 用户询问联系信息，保留联系方式内容');
    // 只清理引用标记，保留联系信息
    return cleanedText.replace(/\n\s*\n/g, '\n').replace(/\s+/g, ' ').trim();
  }
  
  // 常规情况：移除联系信息相关的句子和段落
  cleanedText = cleanedText.replace(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g, ''); // 移除邮箱
  cleanedText = cleanedText.replace(/https?:\/\/[^\s，。）\n,]+/g, ''); // 移除URL
  cleanedText = cleanedText.replace(/(?:联系电话|电话|手机|tel)[：:\s]*[\d\s\-\+\(\)]{8,20}/gi, ''); // 移除电话
  cleanedText = cleanedText.replace(/(?:办公地点|办公室|地址)[：:\s]*[^\n。；,，]+/gi, ''); // 移除地址
  cleanedText = cleanedText.replace(/(邮箱|电话|主页|网站|办公地点|地址|联系方式|联系电话)[：:]?[^。\n]*[。\n]?/gi, ''); // 移除联系信息句子
  
  // 移除空行和多余空格
  cleanedText = cleanedText.replace(/\n\s*\n/g, '\n').replace(/\s+/g, ' ').trim();
  
  return cleanedText;
}

exports.main = async (event) => {
  const executionStartTime = Date.now();
  const MAX_EXECUTION_TIME = 55000; // 55秒硬限制，留5秒缓冲
  console.log('🚀 云函数开始执行:', new Date().toISOString());
  
  // 设置全局超时保护
  const timeoutPromise = new Promise((_, reject) => {
    setTimeout(() => {
      reject(new Error('云函数执行超时，已主动中断'));
    }, MAX_EXECUTION_TIME);
  });
  
  try {
    return await Promise.race([
      executeMainLogic(event, executionStartTime),
      timeoutPromise
    ]);
  } catch (error) {
    const executionTime = Date.now() - executionStartTime;
    console.error(`❌ 云函数执行失败 (${executionTime}ms):`, error.message);
    return { 
      code: 500, 
      message: error.message.includes('超时') ? '处理超时，请重试' : '处理失败: ' + error.message,
      execution_time: executionTime
    };
  }
};

async function executeMainLogic(event, executionStartTime) {
  console.log('收到事件:', JSON.stringify(event, null, 2));
  
  // 兼容 Node.js 10.15 的参数解构方式
  const eventData = event || {};
  const input = eventData.input || '';
  const bot_id = eventData.bot_id || '7537877620181041204'; // 你的智能体ID
  const conversation_id = eventData.conversation_id || ''; // 对话ID
  const user_id = eventData.user_id || 'miniprogram_user'; // 用户ID

  console.log('解析后的参数:', { input, bot_id, conversation_id, user_id });

  if (!input) {
    return { code: 400, message: 'input required' };
  }

  // 从环境变量获取token（生产环境安全方式）
  const COZE_TOKEN = process.env.COZE_TOKEN;
  // 检查token配置
  
  if (!COZE_TOKEN) {
    console.error('COZE_TOKEN 环境变量未配置');
    return { code: 500, message: 'COZE_TOKEN environment variable not configured' };
  }

  // 使用新的Chat API v3
  const url = 'https://api.coze.cn/v3/chat';
  const headers = {
    Authorization: `Bearer ${COZE_TOKEN}`,
    'Content-Type': 'application/json',
    Accept: 'application/json', // 非流式
  };

  // 构建聊天请求体（按照官方文档格式）
  const body = {
    bot_id: bot_id,
    user_id: user_id,
    stream: false, // 非流式
    auto_save_history: true, // 自动保存对话历史
  };

  // 如果有对话ID，使用conversation_id进行多轮对话
  if (conversation_id) {
    body.conversation_id = conversation_id;
    // 多轮对话模式：只发送当前用户消息
    body.additional_messages = [
      {
        content: input,
        content_type: "text",
        role: "user",
        type: "question"
      }
    ];
  } else {
    // 首轮对话模式：使用messages字段
    body.messages = [
      {
        content: input,
        content_type: "text", 
        role: "user",
        type: "question"
      }
    ];
  }

  try {
    
    const resp = await axios.post(url, body, { 
      headers: headers, 
      timeout: 30000,
      validateStatus: function (status) {
        return status < 500; // 接受所有小于500的状态码
      }
    });
    
    // API调用成功
    
    const result = resp.data;
    
    if (resp.status !== 200) {
      throw new Error(`API调用失败: ${resp.status} - ${result?.error?.message || '未知错误'}`);
    }

    // 获取chat_id和conversation_id
    const chat_id = result.data?.id;
    const conversation_id_new = result.data?.conversation_id || conversation_id;
    
    if (!chat_id) {
      throw new Error('未获取到chat_id');
    }

    // 如果状态是in_progress，需要轮询获取最终结果
    let chatStatus = result.data?.status;
    let finalResult = result;
    let retryCount = 0;
    const maxRetries = 12; // 减少到12次，避免超时
    
    while (chatStatus === 'in_progress' && retryCount < maxRetries) {
      console.log(`=== 轮询获取结果 (第${retryCount + 1}次) ===`);
      
      // 缩短等待时间，提高响应速度
      const retryInterval = retryCount < 3 ? 1500 : (retryCount < 8 ? 2500 : 3500);
      console.log(`等待 ${retryInterval}ms 后查询...`);
      
      // 等待一段时间再查询
      await new Promise(resolve => setTimeout(resolve, retryInterval));
      
      // 查询聊天结果
      const queryResp = await axios.get(`https://api.coze.cn/v3/chat/retrieve?chat_id=${chat_id}&conversation_id=${conversation_id_new}`, {
        headers: headers,
        timeout: 10000, // 缩短超时时间
        validateStatus: function (status) {
          return status < 500;
        }
      });
      
      if (queryResp.status === 200 && queryResp.data?.data) {
        finalResult = queryResp.data;
        chatStatus = queryResp.data.data.status;
        
        if (chatStatus === 'completed') {
          console.log('✅ 智能体处理完成');
          break;
        } else if (chatStatus === 'failed') {
          console.error('❌ 智能体处理失败');
          break;
        }
      }
      
      retryCount++;
      
      // 早期退出机制：如果已经轮询了8次还没完成，尝试获取当前消息
      if (retryCount >= 8) {
        console.log('⚠️ 轮询时间较长，尝试获取当前可用消息');
        break;
      }
    }

    if (chatStatus === 'in_progress') {
      console.warn('⚠️ 轮询超时，尝试获取当前消息');
      // 即使轮询超时，也尝试获取可能已经生成的消息
    } else if (chatStatus === 'failed') {
      console.warn('⚠️ 智能体处理失败，但仍尝试获取可能的消息');
    }

    // 获取聊天消息 - 无论是否完成都尝试获取
    let messagesResp;
    try {
      messagesResp = await axios.get(`https://api.coze.cn/v3/chat/message/list?chat_id=${chat_id}&conversation_id=${conversation_id_new}`, {
        headers: headers,
        timeout: 15000,
        validateStatus: function (status) {
          return status < 500;
        }
      });
      // 消息响应已获取
    } catch (e) {
      console.error('获取消息列表失败:', e.message);
      // 如果获取消息失败，使用默认消息
      messagesResp = { status: 500, data: null };
    }

    // 解析真实的AI回复
    let response_text = '';
    let card_data = null;
    
    // 处理返回的消息
    if (messagesResp.status === 200 && messagesResp.data?.data?.length > 0) {
      const messages = messagesResp.data.data;
      console.log(`找到 ${messages.length} 条消息`);
      
      // 查找助手回复
      let assistantMessages = [];
      for (let i = 0; i < messages.length; i++) {
        const msg = messages[i];
        if (msg.role === 'assistant' && (msg.type === 'answer' || msg.type === 'function_call' || msg.type === 'tool_response')) {
          assistantMessages.push(msg);
        }
      }
      
      // 拼接所有助手消息
      if (assistantMessages.length > 0) {
        // 优先使用最后一条answer类型的消息
        const answerMsg = assistantMessages.reverse().find(msg => msg.type === 'answer' && msg.content);
        if (answerMsg) {
          response_text = answerMsg.content;
        } else {
          // 如果没有answer，使用所有有内容的消息
          response_text = assistantMessages
            .filter(msg => msg.content)
            .map(msg => msg.content)
            .join('\n\n');
        }
        
        // 只有在有实际内容时才进行解析和清理
        if (response_text && response_text.trim().length > 0) {
          // 首先检查是否为无关提问的回答
          if (isIrrelevantResponse(response_text)) {
            console.log('✅ 检测到无关提问，返回标准回复');
            response_text = '抱歉，我们无法为您提供相关内容的回答，请问您有什么科研合作需求？';
            card_data = null; // 不生成教授卡片
          } else {
            // 简单逻辑：直接解析AI回复中的教授信息
            card_data = parseProfesorInfoFromText(response_text);
            
            if (card_data && card_data.professors && card_data.professors.length > 0) {
              // 有教授卡片时简化文字回复
              response_text = '根据您的需求，为您推荐以下教授：';
            }
            // 如果没有卡片，保持原有的文字回复
          }
        }
      }
    }
    
    // 如果没找到有效回复，生成默认消息
    if (!response_text || response_text.trim().length === 0) {
      if (chatStatus === 'in_progress') {
        response_text = '正在处理中，请稍后重试';
      } else if (chatStatus === 'failed') {
        response_text = '处理失败，请重试或换个表达方式';  
      } else {
        response_text = '暂时无法回复，请稍后重试';
      }
    }
    
    // 根据问题类型决定返回策略
    if (card_data && card_data.type === 'professor_list' && card_data.professors && card_data.professors.length > 0) {
      if (isIrrelevantResponse(response_text)) {
        card_data = null;
      } else if (!isSpecificProfessorInquiry(input)) {
        // 宽泛问题：只返回卡片
        response_text = '';
      }
    }
    
    const executionEndTime = Date.now();
    const totalExecutionTime = executionEndTime - executionStartTime;
    console.log(`✅ 云函数执行完成，总耗时: ${totalExecutionTime}ms (${(totalExecutionTime/1000).toFixed(2)}s)`);
    
    return { 
      code: 0, 
      data: { 
        response_text: response_text, 
        card_data: card_data, 
        conversation_id: conversation_id_new,
        raw: finalResult,
        execution_time: totalExecutionTime
      } 
    };
  } catch (e) {
    const executionEndTime = Date.now();
    const totalExecutionTime = executionEndTime - executionStartTime;
    console.error(`❌ API调用失败 (耗时: ${totalExecutionTime}ms):`, e.message);
    
    return { 
      code: 500, 
      message: 'API调用失败: ' + e.message,
      execution_time: totalExecutionTime
    };
  }
}
